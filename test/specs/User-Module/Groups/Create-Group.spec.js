const adminModulePage = require('../../../pageobjects/admin.module.page')
const groupsPage = require('../../../pageobjects/user-module/groups.page')
let groupName = ''

describe('Add a new group, and check the business logic', async()=>{
    it('Should be able to login successfully', async()=>{
        allureReporter.addFeature('Manage Groups')
		allureReporter.addStory('As an HQCCC user, I should be able to create a new group')
		allureReporter.addSeverity('blocker')
        await browser.maximizeWindow()
        await helper.loginForSpecificUser(appSettings.users.main_user_2.username, appSettings.users.main_user_2.password, true)
		await browser.pause(3000)
    });
    it('Should be able to access the user module', async() => {
        allureReporter.addFeature('Manage Groups')
		allureReporter.addStory('As an HQCCC user, I should be able to create a new group')
        allureReporter.addSeverity('normal')
        await adminModulePage.redirectToUserModule()
		await browser.pause(3000)
    });
    it('Should be able to access the groups section in the user module', async() => {
        allureReporter.addFeature('Manage Groups')
		allureReporter.addStory('As an HQCCC user, I should be able to create a new group')
        allureReporter.addSeverity('normal')
        await adminModulePage.redirectToUserModuleTab(1, `${appSettings.hqccc_urls.admin_module.groups_url}`)
        await browser.pause(1000)
        await expect(adminModulePage.adminTabs[1]).toHaveAttrContaining('class', 'active-link')
        await expect(groupsPage.addGroupButton).toBeDisplayed()
        await expect(groupsPage.searchInput).toBeDisplayed()
        await expect(groupsPage.groupsTable).toBeDisplayed()
        await expect(groupsPage.detailedViewToggleButton).toBeDisplayed()
        await browser.pause(3000)
    });
    it('Should not be able to add a group without a name', async() => {
        allureReporter.addFeature('Manage Groups')
		allureReporter.addStory('As an HQCCC user, I should be able to create a new group')
        allureReporter.addSeverity('normal')
        await groupsPage.addGroupButton.click()
        await browser.pause(2000)
        await expect(browser).toHaveUrl(`${appSettings.hqccc_urls.admin_module.add_group_url}`)
        await groupsPage.saveButton.scrollIntoView()
        await browser.pause(2000)
        await groupsPage.saveButton.click()
        await adminModulePage.adminTabs[1].scrollIntoView()
        await expect(await groupsPage.name).toHaveAttr('aria-required', 'true')
        chaiExpect(await groupsPage.requiredFields.length).to.equal(1)
        await browser.pause(3000)
    });
    it('Should not able to add a group with a negative of allow shared modification duration',async () => {
        allureReporter.addFeature('Manage Groups')
		allureReporter.addStory('As an HQCCC user, I should be able to create a new group')
        allureReporter.addSeverity('normal')
        await adminModulePage.adminTabs[1].scrollIntoView()
        await expect(browser).toHaveUrl(`${appSettings.hqccc_urls.admin_module.add_group_url}`)
        groupName = await helper.getRandomText(10)
        const randomNum = Math.floor(Math.random()*-99)
        await groupsPage.name.setValue(groupName)
        await browser.pause(2000)
        await groupsPage.description.setValue(await helper.getRandomText(10))
        await groupsPage.context.setValue(await helper.getRandomText(10))
        await groupsPage.sharedObjectModificationPeriod.setValue(randomNum)
        await groupsPage.saveButton.scrollIntoView()
        await browser.pause(2000)
        await groupsPage.saveButton.click()
        await browser.pause(3000)
        await expect(browser).toHaveUrl(`${appSettings.hqccc_urls.admin_module.add_group_url}`)
        await browser.pause(3000)
    });
    it('Should be able to add a group by filling all the required fields (name)', async() => {
        allureReporter.addFeature('Manage Groups')
		allureReporter.addStory('As an HQCCC user, I should be able to create a new group')
        allureReporter.addSeverity('normal')
        await adminModulePage.adminTabs[1].scrollIntoView()
        await expect(browser).toHaveUrl(`${appSettings.hqccc_urls.admin_module.add_group_url}`)
        await browser.pause(2000)
        const randomNum = Math.floor(Math.random()*99 +1)
        await browser.pause(2000)
        await groupsPage.description.setValue(await helper.getRandomText(10))
        await groupsPage.context.setValue(await helper.getRandomText(10))
        await groupsPage.sharedObjectModificationPeriod.setValue(randomNum)
        await groupsPage.saveButton.scrollIntoView()
        await browser.pause(2000)
        await groupsPage.saveButton.click()
        await browser.pause(3000)
        await expect(browser).toHaveUrl(`${appSettings.hqccc_urls.admin_module.groups_url}`)
        await browser.pause(3000)
    });
    it('Should be able to check if the added group exists in the table', async() => {
        allureReporter.addFeature('Manage Groups')
		allureReporter.addStory('As an HQCCC user, I should be able to create a new group')
        allureReporter.addSeverity('normal')
        await expect(browser).toHaveUrl(`${appSettings.hqccc_urls.admin_module.groups_url}`)
        await expect(adminModulePage.adminTabs[1]).toHaveAttrContaining('class', 'active-link')
        await expect(groupsPage.addGroupButton).toBeDisplayed()
        await expect(groupsPage.searchInput).toBeDisplayed()
        await expect(groupsPage.groupsTable).toBeDisplayed()
        await expect(groupsPage.detailedViewToggleButton).toBeDisplayed()
        await helper.insertStringInFilter(groupsPage.searchInput, groupName)
        await expect(await groupsPage.groupsTable.length).toEqual(1)
        let grpNameFromTable = await groupsPage.groupsTableRow[0].getText()
        grpNameFromTable = grpNameFromTable.trim()
        await expect(grpNameFromTable).toEqual(`${groupName}`)
    });
    it('Should be able to view the access rights of the newly added group in a detailed view', async() => {
        allureReporter.addFeature('Manage Groups')
		allureReporter.addStory('As an HQCCC user, I should be able to create a new group')
        allureReporter.addSeverity('normal')
        await groupsPage.detailedViewToggleButton.click()
        await browser.pause(4000)
        await helper.insertStringInFilter(groupsPage.searchInput, groupName)
        await expect(await groupsPage.groupsTable.length).toEqual(1)
        await browser.pause(2000)
        let grpNameFromTable = await groupsPage.groupsTableRow[0].getText()
        await browser.pause(2000)
        grpNameFromTable = grpNameFromTable.trim()
        await browser.pause(2000)
        await expect(grpNameFromTable).toEqual(`${groupName}`)
        await browser.pause(2000)
        const length = await groupsPage.groupsTableRow.length
        await browser.pause(2000)
        for(let i =1; i<length-1; i++) {
            await expect(groupsPage.groupsTableRowMatIcon[i]).toHaveAttrContaining('class', 'no-access material-icons')
            await browser.pause(2000)
        }
    });
    it('Should be able to modify the web modules of the added group & validate in the detailed view mode', async() => {
        allureReporter.addFeature('Manage Groups')
		allureReporter.addStory('As an HQCCC user, I should be able to modify a group')
        allureReporter.addSeverity('normal')
        await groupsPage.detailedViewToggleButton.click()
        await expect(await groupsPage.groupsTable.length).toEqual(1)
        let grpNameFromTable = await groupsPage.groupsTableRow[0].getText()
        grpNameFromTable = grpNameFromTable.trim()
        await expect(grpNameFromTable).toEqual(`${groupName}`)
        await groupsPage.groupsTableRow[0].click()
        await expect(browser).toHaveUrlContaining(`${appSettings.hqccc_urls.admin_module.specified_group_url}`)
        await browser.pause(2000)
        await groupsPage.webModulesTab.click()
        await expect(groupsPage.groupsTable).toBeDisplayed()
        const length = await groupsPage.webModules.length
        for(let i=0;i<length ;i++){
            let webModuleText =await groupsPage.webModules[i].getText()
            webModuleText = webModuleText.trim()
            webModuleText = webModuleText.toUpperCase()
            if(webModuleText === 'APP_BUILDER_END_USER'){
                await groupsPage.editWebModuleButton[i].click()
                break
            }
        }
        await browser.pause(1000)
        await groupsPage.webModulesDropDown[0].click()
        await groupsPage.webModuleDropdownOptions[2].click()
        await groupsPage.saveWebModuleChanges.click()
        await groupsPage.saveAllChanges.scrollIntoView()
        await groupsPage.saveAllChanges.click()
        await browser.pause(2000)
        await adminModulePage.adminTabs[1].click()
        await browser.pause(2000)
        await expect(browser).toHaveUrl(`${appSettings.hqccc_urls.admin_module.groups_url}`)
        await groupsPage.detailedViewToggleButton.click()
        await browser.pause(2000)
        await helper.insertStringInFilter(groupsPage.searchInput, groupName)
        await expect(await groupsPage.groupsTable.length).toEqual(1)
        grpNameFromTable = await groupsPage.groupsTableRow[0].getText()
        grpNameFromTable = grpNameFromTable.trim()
        await expect(grpNameFromTable).toEqual(`${groupName}`)
        await expect(groupsPage.groupsTableRowMatIcon[0]).toHaveAttrContaining('class', 'only-read material-icons')
    });
})
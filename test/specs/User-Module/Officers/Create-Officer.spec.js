const adminModulePage = require('../../../pageobjects/admin.module.page')
const officerPage = require('../../../pageobjects/user-module/officer.page')
let officerName = ''
let officerLName =''
let officerFatherName = ''
let gender = ''
let militaryPoste = ''
let officerRank = ''

describe('Add a new officer, and check the business logic', async()=>{

    it('Should be able to login successfully', async()=>{
        allureReporter.addFeature('Officers Section')
		allureReporter.addStory('As an HQCCC user, I should be able to add a new officer')
		allureReporter.addSeverity('blocker')
        await browser.maximizeWindow()
		await helper.loginForSpecificUser(appSettings.users.main_user_2.username, appSettings.users.main_user_2.password, true)
		await browser.pause(3000)
    })
    it('Should be able to access the user module', async() => {
        allureReporter.addFeature('Officers Section')
		allureReporter.addStory('As an HQCCC user, I should be able to add a new officer')
        allureReporter.addSeverity('normal')
        await adminModulePage.redirectToUserModule()
		await browser.pause(3000)
    });
    it('Should be able to access the officers section in the user module', async() => {
        allureReporter.addFeature('Officers Section')
		allureReporter.addStory('As an HQCCC user, I should be able to add a new officer')
        allureReporter.addSeverity('normal')
        await adminModulePage.redirectToUserModuleTab(5,`${appSettings.hqccc_urls.admin_module.officers_url}` )
        await browser.pause(1000)
        await expect(adminModulePage.adminTabs[5]).toHaveAttrContaining('class', 'active-link')
        await expect(officerPage.addOfficerButton).toBeDisplayed()
        await expect(officerPage.searchInput).toBeDisplayed()
        await expect(officerPage.filter).toBeDisplayed()
        await expect(officerPage.officersTable).toBeDisplayed()
        await browser.pause(3000)
    });
    it('Should be able to access the create new officer module', async() => {
        allureReporter.addFeature('Officers Section')
		allureReporter.addStory('As an HQCCC user, I should be able to add a new officer')
        allureReporter.addSeverity('normal')
        await officerPage.addOfficerButton.click()
        await browser.pause(3000)
        await expect(browser).toHaveUrl(`${appSettings.hqccc_urls.admin_module.add_new_officer_url}`)
        await expect(await officerPage.name).toBeDisplayed()
        await expect(await officerPage.lName).toBeDisplayed()
        await expect(await officerPage.militaryPoste).toBeDisplayed()
        await browser.pause(3000)
    });
    it('Should not be able to add an officer without filling the required fields', async() => {
        allureReporter.addFeature('Officers Section')
		allureReporter.addStory('As an HQCCC user, I should be able to add a new officer')
        allureReporter.addSeverity('normal')
        adminModulePage.adminTabs[5].scrollIntoView()
        await officerPage.addOfficer.click()
        chaiExpect(await officerPage.requiredFields.length).to.equal(4)
        await expect(browser).toHaveUrl(`${appSettings.hqccc_urls.admin_module.add_new_officer_url}`)
        await officerPage.name.setValue(await helper.getRandomText(10))
        await officerPage.lName.setValue(await helper.getRandomText(10))
        chaiExpect(await officerPage.requiredFields.length).to.equal(2)
        adminModulePage.adminTabs[5].scrollIntoView()
        await officerPage.addOfficer.click()
        await expect(browser).toHaveUrl(`${appSettings.hqccc_urls.admin_module.add_new_officer_url}`)
    });
    it('Should be able to add an officer by filling all the required fields', async() => {
        allureReporter.addFeature('Officers Section')
		allureReporter.addStory('As an HQCCC user, I should be able to add a new officer')
        allureReporter.addSeverity('normal')
        //set a random full name
		officerName = await helper.getRandomText(10)
        officerLName = await helper.getRandomText(10)
        officerFatherName = await helper.getRandomText(10)
        await browser.pause(2000)
        await officerPage.name.setValue(officerName)
        await browser.pause(2000)
        await officerPage.lName.setValue(officerLName)
        await browser.pause(2000)
        await officerPage.fatherName.setValue(officerFatherName)
        await browser.pause(2000)
        //set a random Gender
        await officerPage.gender.click()
        await helper.selectRandomlyMatOption()
        gender = await officerPage.gender.getText()
        await browser.pause(2000)
        await officerPage.militaryPoste.click()
        await helper.selectRandomlyMatOption()
        militaryPoste = await officerPage.militaryPoste.getText()
        await browser.pause(2000)
        await expect(await officerPage.addOfficer).toBeDisplayed()
        await officerPage.addOfficer.click()
        await browser.pause(3000)
    });
    it('Should be able to validate that the added officer exists in the officers table', async() => {
        allureReporter.addFeature('Officers Section')
		allureReporter.addStory('As an HQCCC user, I should be able to add a new officer')
        allureReporter.addSeverity('normal')
        await expect(browser).toHaveUrl(`${appSettings.hqccc_urls.admin_module.officers_url}`)
        await expect(adminModulePage.adminTabs[5]).toHaveAttrContaining('class', 'active-link')
        await expect(officerPage.addOfficerButton).toBeDisplayed()
        await expect(officerPage.searchInput).toBeDisplayed()
        await expect(officerPage.filter).toBeDisplayed()
        await expect(officerPage.officersTable).toBeDisplayed()
        await helper.insertStringInFilter(officerPage.searchInput, officerName)
        await expect(await officerPage.fullNameFromTable[0].getText()).toEqual(`${officerName} ${officerFatherName} ${officerLName}`)
    });
    it('Should be able to add an officer from an existing person', async () => {
        allureReporter.addFeature('Officers Section')
		allureReporter.addStory('As an HQCCC user, I should be able to add a new officer')
        allureReporter.addSeverity('normal')
        await adminModulePage.adminTabs[5].scrollIntoView()
        await officerPage.addOfficerButton.click()
        await browser.pause(3000)
        await expect(browser).toHaveUrl(`${appSettings.hqccc_urls.admin_module.add_new_officer_url}`)
        await officerPage.name.setValue(officerName)
        await browser.pause(2000)
        await officerPage.lName.setValue(officerLName)
        await officerPage.randomClickOnWeb.click()
        await browser.pause(4000)
        await expect(officerPage.appLinkPopUp).toBeDisplayed()
        await expect(officerPage.appLinkPopUpClose).toBeDisplayed()
        await expect(officerPage.appLinkPopUpInput).toBeDisplayed()
        await expect(officerPage.appLinkPopUpTable).toBeDisplayed()
        await expect(officerPage.appLinkPopUpTableRow).toBeDisplayed()
        await expect(officerPage.appLinkPopUpDoneBtn).toBeDisplayed()
        await browser.pause(2000)
        await expect(officerPage.appLinkPopUpCheckbox).toBeDisplayed()
        await officerPage.appLinkPopUpCheckbox.click()
        await browser.pause(2000)
        await officerPage.appLinkPopUpDoneBtn.click()
        await browser.pause(3000)
        await expect(await officerPage.militaryPoste.getText()).toEqual(militaryPoste)
        await expect(await officerPage.name.getValue()).toEqual(officerName)
        await expect(await officerPage.lName.getValue()).toEqual(officerLName)
        await expect(await officerPage.fatherName.getValue()).toEqual(officerFatherName)
        await browser.pause(3000)
        
    });
    it('Should validate the existence of the added officer', async() => {
        allureReporter.addFeature('Officers Section')
		allureReporter.addStory('As an HQCCC user, I should be able to add a new officer')
        allureReporter.addSeverity('normal')
        await adminModulePage.redirectToUserModule()
        await browser.pause(6000)
        await adminModulePage.redirectToUserModuleTab(5,`${appSettings.hqccc_urls.admin_module.officers_url}` )
        await browser.pause(3000)
        await expect(browser).toHaveUrl(`${appSettings.hqccc_urls.admin_module.officers_url}`)
        await expect(adminModulePage.adminTabs[5]).toHaveAttrContaining('class', 'active-link')
        await expect(officerPage.addOfficerButton).toBeDisplayed()
        await expect(officerPage.searchInput).toBeDisplayed()
        await expect(officerPage.filter).toBeDisplayed()
        await expect(officerPage.officersTable).toBeDisplayed()
        await helper.insertStringInFilter(officerPage.searchInput, officerName)
        await expect(await officerPage.fullNameFromTable[0].getText()).toEqual(`${officerName} ${officerFatherName} ${officerLName}`)
        
    });
    it('Should be able to create a new officer with detailed information', async () => {
        allureReporter.addFeature('Officers Section')
		allureReporter.addStory('As an HQCCC user, I should be able to add a new officer')
        allureReporter.addSeverity('normal')
        await adminModulePage.redirectToUserModule()
        await browser.pause(5000)
        await adminModulePage.redirectToUserModuleTab(5,`${appSettings.hqccc_urls.admin_module.officers_url}` )
        await browser.pause(5000)
        await officerPage.addOfficerButton.click()
        await expect(browser).toHaveUrl(`${appSettings.hqccc_urls.admin_module.add_new_officer_url}`)
        //set a random full name
		await officerPage.phoneNumbers.scrollIntoView()
        await browser.pause(3000)
        await officerPage.phoneNumbers.click()
        await officerPage.healthInsurance.click()
        await browser.pause(2000)
        await adminModulePage.adminTabs[5].scrollIntoView()
        await browser.pause(2000)
        officerName = await helper.getRandomText(10)
        officerLName = await helper.getRandomText(10)
        officerFatherName = await helper.getRandomText(10)
        await browser.pause(2000)
        await officerPage.name.setValue(officerName)
        await browser.pause(2000)
        await officerPage.lName.setValue(officerLName)
        await browser.pause(2000)
        await officerPage.fatherName.setValue(officerFatherName)
        await browser.pause(2000)
        await officerPage.motherName.setValue(await helper.getRandomText(10))
        await officerPage.motherLName.setValue(await helper.getRandomText(10))
        await officerPage.gender.click()
        await helper.selectRandomlyMatOption()
        gender = await officerPage.gender.getText()
        await officerPage.militaryIDNumber.setValue(await helper.getRandomText(2))
        await officerPage.role.click()
        await helper.selectRandomlyMatOption()
        await officerPage.rank.click()
        await helper.selectRandomlyMatOption()
        officerRank = await officerPage.rank.getText(); 
        await officerPage.militaryPoste.click()
        await helper.selectRandomlyMatOption()
        militaryPoste = await officerPage.militaryPoste.getText();
        await officerPage.fromDate.click()
        await officerPage.checkDateButton.click()
        await officerPage.toDate.click()
        await officerPage.increaseTimeButton.click()
        await officerPage.checkDateButton.click()
        await officerPage.bloodType.click()
        await helper.selectRandomlyMatOption()
        await officerPage.educationalLevel.setValue(await helper.getRandomText(10))
        await officerPage.maritalStatus.click()
        await helper.selectRandomlyMatOption()
        await officerPage.mailBox.setValue(await helper.getRandomText(10))
        const email = officerName+ '@gmail.com'
        await officerPage.emailAddress.setValue(email)
        await officerPage.unrestrictedData.click()
        await helper.selectRandomlyMatOption()
        await officerPage.unrestrictedData.scrollIntoView()
        //set a random phone numbers
        await officerPage.phoneNumber.setValue(Math.floor(Math.random()*10000))
        await browser.pause(2000)
        //set a random insurance
        await officerPage.insuranceType.click()
        await helper.selectRandomlyMatOption()
        await browser.pause(2000)
        await officerPage.addOfficer.click()
        await browser.pause(3000)

    });
    it('Should validate the existence of the added officer', async() => {
        allureReporter.addFeature('Officers Section')
		allureReporter.addStory('As an HQCCC user, I should be able to add a new officer')
        allureReporter.addSeverity('normal')
        await expect(browser).toHaveUrl(`${appSettings.hqccc_urls.admin_module.officers_url}`)
        await expect(adminModulePage.adminTabs[5]).toHaveAttrContaining('class', 'active-link')
        await expect(officerPage.addOfficerButton).toBeDisplayed()
        await expect(officerPage.searchInput).toBeDisplayed()
        await expect(officerPage.filter).toBeDisplayed()
        await expect(officerPage.officersTable).toBeDisplayed()
        await helper.insertStringInFilter(officerPage.searchInput, officerName)
        if(officerRank){
            chaiExpect(await officerPage.fullNameFromTable[0].getText()).to.equal(officerRank + ' '+officerName + ' '+ officerFatherName + ' '+ officerLName)
            // await expect().toEqual(`${officerRank} ${officerName} ${officerFatherName} ${officerLName}`)
        }
        else{
            await expect(await officerPage.fullNameFromTable[0].getText()).toEqual(`${officerName} ${officerFatherName} ${officerLName}`)
        }        
    });

})